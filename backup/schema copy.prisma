generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum UserRole {
  user
  admin
}

enum TicketLevelType {
  DIAMOND
  GENERAL
  VIP
}

enum OrderStatus {
  PENDING
  COMPLETED
  CANCELED
}

enum Gender {
  Male
  Female
  Other
}

enum AuthMethod {
  FACEBOOK
  GOOGLE
  EMAIL
}

model User {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  email     String @unique
  password  String
  firstname String
  lastname  String

  imgUrl String?

  emailConfirmed Boolean @default(false)

  role UserRole @default(user)

  // Password reset fields
  resetToken       String?
  resetTokenExpiry DateTime?

  // Authentication and authorization fields
  refreshToken String?
  authMethod   AuthMethod
  confirmToken String?

  // One-to-one relationship with Address
  address   Address? @relation("UserAddress", fields: [addressId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  addressId String?  @unique @db.ObjectId

  // One-to-one relationship with BillingInfo
  billingInfo   BillingInfo? @relation("UserBillingInfo", fields: [billingInfoId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  billingInfoId String?      @unique @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Order     Order[]
}

model ContactUs {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  name    String
  subject String
  email   String
  message String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model NewsletterSubscription {
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  email String @unique

  isSubscribed Boolean @default(false)

  subscribedAt   DateTime  @default(now())
  unsubscribedAt DateTime?
}

model Address {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  phone    String?
  address1 String?
  address2 String?
  city     String?
  country  String?
  zipCode  String?
  state    String?

  user User? @relation("UserAddress")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model BillingInfo {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  phone    String?
  address1 String?
  address2 String?
  city     String?
  country  String?
  zipCode  String?
  state    String?

  user User? @relation("UserBillingInfo")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PartyTicket {
  id              String       @id @default(auto()) @map("_id") @db.ObjectId
  images          String[] // Array to hold multiple image URLs
  coverImage      String // URL for the cover image
  location        String // Location of the party
  dateTime        DateTime // Date and time of the party
  summary         String // Summary or description of the party
  startDateOfSale DateTime // Start date of ticket sale
  endDateOfSale   DateTime // End date of ticket sale
  ticketTypes     TicketType[] // One-to-many relationship with TicketType
  eventBriteUrl   String // (Tempoary) link to event brite to complete checkout

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model TicketType {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  name          TicketLevelType
  price         Float
  partyTicket   PartyTicket     @relation(fields: [partyTicketId], references: [id])
  partyTicketId String          @db.ObjectId

  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  OrderItem OrderItem[]
}

model Order {
  id          String      @id @default(auto()) @map("_id") @db.ObjectId
  user        User        @relation(fields: [userId], references: [id])
  userId      String      @db.ObjectId
  orderItems  OrderItem[] // One-to-many relationship with OrderItem
  totalAmount Float // Total amount for the order
  status      OrderStatus @default(PENDING) // Status of the order

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model OrderItem {
  id           String     @id @default(auto()) @map("_id") @db.ObjectId
  order        Order      @relation(fields: [orderId], references: [id])
  orderId      String     @db.ObjectId
  ticketType   TicketType @relation(fields: [ticketTypeId], references: [id])
  ticketTypeId String     @db.ObjectId
  quantity     Int // Quantity of the ticket type purchased
  unitPrice    Float // Price per unit of the ticket type
  totalPrice   Float // Total price for this item (quantity * unitPrice)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Event {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String
  date        DateTime
  price       Float
  location    String
  summary     String
  posters     String[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// promoter
model Promoter {
  id              String  @id @default(auto()) @map("_id") @db.ObjectId
  firstName       String
  lastName        String
  email           String  @unique
  phoneNumber     String
  gender          Gender
  location        String
  tiktokHandle    String?
  instagramHandle String?
  twitterHandle   String?
  facebookHandle  String?
  description     String?
  note            String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
